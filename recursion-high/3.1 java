package L009_Recursion_High;

import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStreamWriter;
import java.util.InputMismatchException;

public class Recursion_003_1 {
	// public static Scanner scn = new Scanner(System.in);
	private static Scan scn = new Scan(System.in);
	private static Print pnter = new Print();

	public static void main(String[] args) throws Exception {
		// 1.3 permutations, combinations, coinChangp&c/CrossWord_and_Sudoku.
		// 1.4 printNQueens (reactive, proactive, row-wise, alternate),
		// printNKnights

		solve();
		pnter.close();
	}

	public static void solve() throws Exception {
		
		 boolean[] boxes = new boolean[5];
//				 NQueenPermutation(boxes, 3, 0, "");
//				 NQueenCombination(boxes, 3, 0, "", -1);

				// int n = 10;
				// char[][] box = new char[n][n];
				// for (int i = 0; i < n; i++) {
				// box[i] = scn.scanString().toCharArray();
				// }
				// String[] Dictionary = scn.scanString().split(";");
				// CrossWord(box, Dictionary, 0);

//				boolean[][] board = new boolean[4][4];
				// NQueenSlow(board, 0, 0, "");
				// NQueenFast(board, 0, 0, "");
				// NQueenSubSequences(board, 0, 1, "");

	}
	

	static int count = 0;

	private static void NQueenPermutation(boolean[] boxes, int tnq, int qpsf, String csf) throws IOException {
		// tnq_total_n_queen.

		if (qpsf == tnq) {
			count++;
			pnter.printLine(count + " " + csf);
			return;
		}

		for (int i = 0; i < boxes.length; i++) {
			if (boxes[i] == false) {
				boxes[i] = true;
				NQueenPermutation(boxes, tnq, qpsf + 1, csf + "q" + qpsf + "b" + i);
				boxes[i] = false;
			}
		}

	}

	private static void NQueenCombination(boolean[] boxes, int tnq, int qpsf, String csf, int lqpb) throws IOException {
		// tnq_total_n_queen.
		// lqpb_LastQueenPlaceBox.

		if (qpsf == tnq) {
			count++;
			pnter.printLine(count + " " + csf);
			return;
		}

		for (int i = lqpb + 1; i < boxes.length; i++) {
			if (boxes[i] == false) {
				boxes[i] = true;
				NQueenCombination(boxes, tnq, qpsf + 1, csf + "q" + qpsf + "b" + i, i);
				boxes[i] = false;
			}
		}

	}

	private static void CrossWord(char[][] box, String[] dictionary, int windex) throws IOException {

		if (windex == dictionary.length) {
			printCrrosWord(box);
			return;
		}

		String word = dictionary[windex];
		for (int r = 0; r < box.length; r++) {
			for (int c = 0; c < box[0].length; c++) {
				if (box[r][c] == '-' || box[r][c] == word.charAt(0)) {

					if (CanPlaceTheWordHorizontally(box, word, r, c)) {
						boolean[] reset = PlaceTheWordHorizontally(box, word, r, c);
						CrossWord(box, dictionary, windex + 1);
						UnplaceTheWordHorizontally(box, word, reset, r, c);
					}

					if (CanPlaceTheWordVertically(box, word, r, c)) {
						boolean[] reset = PlaceTheWordVertically(box, word, r, c);
						CrossWord(box, dictionary, windex + 1);
						UnplaceTheWordVertically(box, word, reset, r, c);
					}

				}
			}

		}
	}

	private static boolean[] PlaceTheWordHorizontally(char[][] box, String word, int r, int c) {
		boolean[] reset = new boolean[word.length()];

		for (int i = 0; i < word.length(); i++) {
			if (box[r][c + i] == '-') {
				box[r][c + i] = word.charAt(i);
				reset[i] = true;
			}
		}

		return reset;

	}

	private static boolean[] PlaceTheWordVertically(char[][] box, String word, int r, int c) {
		boolean[] reset = new boolean[word.length()];

		for (int i = 0; i < word.length(); i++) {
			if (box[r + i][c] == '-') {
				box[r + i][c] = word.charAt(i);
				reset[i] = true;
			}
		}

		return reset;

	}

	private static void UnplaceTheWordHorizontally(char[][] box, String word, boolean[] reset, int r, int c) {
		for (int i = 0; i < word.length(); i++) {
			if (reset[i] == true) {
				box[r][c + i] = '-';
			}
		}
	}

	private static void UnplaceTheWordVertically(char[][] box, String word, boolean[] reset, int r, int c) {
		for (int i = 0; i < word.length(); i++) {
			if (reset[i] == true) {
				box[r + i][c] = '-';
			}
		}
	}

	private static boolean CanPlaceTheWordHorizontally(char[][] box, String word, int r, int c) {
		for (int i = 0; i < word.length(); i++) {
			if ((c + i) >= box[0].length) {
				return false;
			}
			if (box[r][c + i] != '-' && box[r][c + i] != word.charAt(i)) {
				return false;
			}
		}
		return true;

	}

	private static boolean CanPlaceTheWordVertically(char[][] box, String word, int r, int c) {
		for (int i = 0; i < word.length(); i++) {
			if ((r + i) >= box.length) {
			}
			if (box[r + i][c] != '-' && box[r + i][c] != word.charAt(i)) {
				return false;
			}
		}
		return true;
	}

	private static void printCrrosWord(char[][] box) throws IOException {

		for (int r = 0; r < box.length; r++) {
			for (int c = 0; c < box[0].length; c++) {
				pnter.print(box[r][c] + " ");
			}
			pnter.printLine("");
		}

	}

	private static void NQueenSlow(boolean[][] board, int qpsf, int cellno, String csf) throws IOException {

		if (qpsf == board.length) {
			if (IsBoardSafe(board)) {
				pnter.printLine(csf + "");
				return;
			}
		}

		for (int i = cellno + 1; i < board[0].length * board.length; i++) {
			int r = (i - 1) / board.length;
			int c = (i - 1) % board.length;

			if (!board[r][c]) {
				board[r][c] = true;
				NQueenFast(board, qpsf + 1, i, csf + "(" + r + ", " + c + "), ");
				board[r][c] = false;
			}

		}

	}

	private static void NQueenFast(boolean[][] board, int qpsf, int cellno, String csf) throws IOException {
		if (qpsf == board.length) {
			pnter.printLine(csf + "");
			return;
		}

		for (int i = cellno + 1; i < board[0].length * board.length; i++) {
			int r = (i - 1) / board.length;
			int c = (i - 1) % board.length;

			if (!board[r][c] && IsQueenSafe(board, r, c)) {
				board[r][c] = true;
				NQueenFast(board, qpsf + 1, i, csf + "(" + r + ", " + c + "), ");
				board[r][c] = false;
			}

		}

	}

	private static boolean IsBoardSafe(boolean[][] board) {

		for (int i = 0; i < board.length; i++) {
			for (int j = 0; j < board[0].length; j++) {
				if (board[i][j] == true) {
					if (!IsQueenSafe(board, i, j)) {
						return false;
					}
				}
			}
		}

		return true;

	}

	private static boolean IsQueenSafe(boolean[][] board, int r, int c) {
		int[][] dirc = Eightdirction();

		for (int rad = 1; rad < board.length; rad++) { // Explore_all_radius.
			for (int i = 0; i < dirc.length; i++) { // wrt._to_all_direction.
				int x = r + rad * dirc[i][0];
				int y = c + rad * dirc[i][1];

				if (x >= 0 && y >= 0 && x < board.length && y < board[0].length && board[x][y]) {
					return false;
				}
			}
		}

		return true;

	}

	private static void NQueenSubSequences(boolean[][] board, int qpsf, int bno, String csf) throws IOException {
		if (qpsf == board.length) {
			pnter.printLine(csf + "");
			return;
		}

		if (bno > board.length * board[0].length) {
			return;
		}

		NQueenSubSequences(board, qpsf, bno + 1, csf); // BoxRefuseToTakeQueen.

		int r = (bno - 1) / board.length;
		int c = (bno - 1) % board.length;

		if (!board[r][c] && IsQueenSafe(board, r, c)) {
			board[r][c] = true;
			NQueenSubSequences(board, qpsf + 1, bno + 1, csf + "(" + r + ", " + c + "), ");
			board[r][c] = false;
		}

	}



	// -------------------------------------------------------------------------------------------------------------

	private static int[][] Eightdirction() {
		int[][] dirc = { { 1, 0 }, { 0, 1 }, { -1, 0 }, { 0, -1 }, { 1, 1 }, { -1, -1 }, { 1, -1 }, { -1, 1 } };

		return dirc;

	}
